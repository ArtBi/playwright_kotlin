plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'com.diffplug.spotless' version '6.0.4'
    id 'io.freefair.aspectj.post-compile-weaving' version '8.6'
}

// Extracted versions
def assertjVersion = '3.23.1'
def junitJupiterVersion = '5.10.3'
def playwrightVersion = '1.44.0'
def kotlinLoggingVersion = '2.1.23'
def logbackClassicVersion = '1.2.9'
def testcontainersVersion = '1.19.8'
def aspectjVersion = '1.9.22'
def extentreportsVersion = '5.1.2'

repositories {
    mavenCentral()
}

dependencies {

    // logging
    implementation "io.github.microutils:kotlin-logging-jvm:$kotlinLoggingVersion"
    testImplementation("ch.qos.logback:logback-classic:$logbackClassicVersion")

    //------tests------//
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    //------ui------//
    implementation "com.microsoft.playwright:playwright:$playwrightVersion"
    // Testcontainers dependency
    testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
    testImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
    testImplementation "org.testcontainers:mysql:$testcontainersVersion"
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    // Reporter
    implementation "com.aventstack:extentreports:$extentreportsVersion"

    implementation "org.aspectj:aspectjrt:$aspectjVersion"
    implementation "org.aspectj:aspectjweaver:$aspectjVersion"

    //----Utils----//
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
}

test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(21)
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

spotless {
    java {
        googleJavaFormat() // Use Google Java Format
        target 'src/**/*.java'
    }
    kotlin {
        ktlint() // Use ktlint for Kotlin
        target 'src/**/*.kt'
    }
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/*.txt'
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}

//-------------------Playwright helper-------------

// Commands:
// 1. To display the Trace viewer locally, use the following command
//    Note: Replace {path/file_name}.zip with your specific file path.
//    `./gradlew run --args="show-trace {path/file_name}.zip"`
application {
    mainClass.set('com.microsoft.playwright.CLI')
}

tasks.register('openPlaywrightRecorder', Exec) {
    description = 'Build and install without running tests'
    commandLine 'gradle', 'run', '--args=open'
}

tasks.register('buildAndInstall', Exec) {
    description = 'Build and install without running tests'
    commandLine 'gradle', 'build', '-x', 'test'
}

tasks.register('installPlaywright', Exec) {
    description = 'Install Playwright with dependencies'
    commandLine 'gradle', 'run', '--args=install --with-deps'
}

installPlaywright.dependsOn(buildAndInstall)
